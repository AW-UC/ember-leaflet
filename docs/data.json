{
    "project": {
        "name": "EmberLeaflet",
        "description": "Ember + Leaflet = Fun with maps!",
        "version": "0.1",
        "url": "http://gabesmed.github.io/ember-leaflet/"
    },
    "files": {
        "packages/ember-leaflet/lib/collection/bounds.js": {
            "name": "packages/ember-leaflet/lib/collection/bounds.js",
            "modules": {},
            "classes": {
                "EmberLeaflet.CollectionBoundsMixin": 1
            },
            "fors": {},
            "namespaces": {
                "EmberLeaflet": 1
            }
        },
        "packages/ember-leaflet/lib/collection/collection.js": {
            "name": "packages/ember-leaflet/lib/collection/collection.js",
            "modules": {},
            "classes": {
                "EmberLeaflet.CollectionLayer": 1
            },
            "fors": {},
            "namespaces": {
                "EmberLeaflet": 1
            }
        },
        "packages/ember-leaflet/lib/marker/draggable.js": {
            "name": "packages/ember-leaflet/lib/marker/draggable.js",
            "modules": {},
            "classes": {
                "EmberLeaflet.DraggableMixin": 1
            },
            "fors": {},
            "namespaces": {
                "EmberLeaflet": 1
            }
        },
        "packages/ember-leaflet/lib/marker/marker.js": {
            "name": "packages/ember-leaflet/lib/marker/marker.js",
            "modules": {},
            "classes": {
                "EmberLeaflet.MarkerLayer": 1
            },
            "fors": {},
            "namespaces": {
                "EmberLeaflet": 1
            }
        },
        "packages/ember-leaflet/lib/marker_cluster/marker_cluster.js": {
            "name": "packages/ember-leaflet/lib/marker_cluster/marker_cluster.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-leaflet/lib/marker_collection/marker_collection.js": {
            "name": "packages/ember-leaflet/lib/marker_collection/marker_collection.js",
            "modules": {},
            "classes": {
                "EmberLeaflet.MarkerCollectionLayer": 1
            },
            "fors": {},
            "namespaces": {
                "EmberLeaflet": 1
            }
        },
        "packages/ember-leaflet/lib/mixin/bounds.js": {
            "name": "packages/ember-leaflet/lib/mixin/bounds.js",
            "modules": {},
            "classes": {
                "EmberLeaflet.BoundsMixin": 1
            },
            "fors": {},
            "namespaces": {
                "EmberLeaflet": 1
            }
        },
        "packages/ember-leaflet/lib/mixin/popup.js": {
            "name": "packages/ember-leaflet/lib/mixin/popup.js",
            "modules": {},
            "classes": {
                "EmberLeaflet.PopupMixin": 1
            },
            "fors": {},
            "namespaces": {
                "EmberLeaflet": 1
            }
        },
        "packages/ember-leaflet/lib/path/array.js": {
            "name": "packages/ember-leaflet/lib/path/array.js",
            "modules": {},
            "classes": {
                "EmberLeaflet.ArrayPathLayer": 1
            },
            "fors": {},
            "namespaces": {
                "EmberLeaflet": 1
            }
        },
        "packages/ember-leaflet/lib/path/bounds.js": {
            "name": "packages/ember-leaflet/lib/path/bounds.js",
            "modules": {},
            "classes": {
                "EmberLeaflet.PathBoundsLayer": 1
            },
            "fors": {},
            "namespaces": {
                "EmberLeaflet": 1
            }
        },
        "packages/ember-leaflet/lib/path/circle.js": {
            "name": "packages/ember-leaflet/lib/path/circle.js",
            "modules": {},
            "classes": {
                "EmberLeaflet.CircleLayer": 1
            },
            "fors": {},
            "namespaces": {
                "EmberLeaflet": 1
            }
        },
        "packages/ember-leaflet/lib/path/path.js": {
            "name": "packages/ember-leaflet/lib/path/path.js",
            "modules": {},
            "classes": {
                "EmberLeaflet.PathLayer": 1
            },
            "fors": {},
            "namespaces": {
                "EmberLeaflet": 1
            }
        },
        "packages/ember-leaflet/lib/path/point.js": {
            "name": "packages/ember-leaflet/lib/path/point.js",
            "modules": {},
            "classes": {
                "EmberLeaflet.PointPathLayer": 1
            },
            "fors": {},
            "namespaces": {
                "EmberLeaflet": 1
            }
        },
        "packages/ember-leaflet/lib/path/polyline.js": {
            "name": "packages/ember-leaflet/lib/path/polyline.js",
            "modules": {},
            "classes": {
                "EmberLeaflet.PolylineLayer": 1
            },
            "fors": {},
            "namespaces": {
                "EmberLeaflet": 1
            }
        },
        "packages/ember-leaflet/lib/path/rectangle.js": {
            "name": "packages/ember-leaflet/lib/path/rectangle.js",
            "modules": {},
            "classes": {
                "EmberLeaflet.RectangleLayer": 1
            },
            "fors": {},
            "namespaces": {
                "EmberLeaflet": 1
            }
        },
        "packages/ember-leaflet/lib/container.js": {
            "name": "packages/ember-leaflet/lib/container.js",
            "modules": {},
            "classes": {
                "EmberLeaflet.ContainerLayer": 1
            },
            "fors": {},
            "namespaces": {
                "EmberLeaflet": 1
            }
        },
        "packages/ember-leaflet/lib/layer.js": {
            "name": "packages/ember-leaflet/lib/layer.js",
            "modules": {},
            "classes": {
                "EmberLeaflet.LayerMixin": 1,
                "EmberLeaflet.Layer": 1,
                "EmberLeaflet.EmptyLayer": 1
            },
            "fors": {},
            "namespaces": {
                "EmberLeaflet": 1
            }
        },
        "packages/ember-leaflet/lib/main.js": {
            "name": "packages/ember-leaflet/lib/main.js",
            "modules": {
                "ember-leaflet": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-leaflet/lib/map.js": {
            "name": "packages/ember-leaflet/lib/map.js",
            "modules": {},
            "classes": {
                "EmberLeaflet.MapView": 1
            },
            "fors": {},
            "namespaces": {
                "EmberLeaflet": 1
            }
        },
        "packages/ember-leaflet/lib/tile.js": {
            "name": "packages/ember-leaflet/lib/tile.js",
            "modules": {},
            "classes": {
                "EmberLeaflet.TileLayer": 1
            },
            "fors": {},
            "namespaces": {
                "EmberLeaflet": 1
            }
        },
        "packages/ember-leaflet/lib/utils.js": {
            "name": "packages/ember-leaflet/lib/utils.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "ember-leaflet": {
            "name": "ember-leaflet",
            "submodules": {},
            "classes": {
                "EmberLeaflet.CollectionBoundsMixin": 1,
                "EmberLeaflet.CollectionLayer": 1,
                "EmberLeaflet.DraggableMixin": 1,
                "EmberLeaflet.MarkerLayer": 1,
                "EmberLeaflet.MarkerCollectionLayer": 1,
                "EmberLeaflet.BoundsMixin": 1,
                "EmberLeaflet.PopupMixin": 1,
                "EmberLeaflet.ArrayPathLayer": 1,
                "EmberLeaflet.PathBoundsLayer": 1,
                "EmberLeaflet.CircleLayer": 1,
                "EmberLeaflet.PathLayer": 1,
                "EmberLeaflet.PointPathLayer": 1,
                "EmberLeaflet.PolylineLayer": 1,
                "EmberLeaflet.RectangleLayer": 1,
                "EmberLeaflet.ContainerLayer": 1,
                "EmberLeaflet.LayerMixin": 1,
                "EmberLeaflet.Layer": 1,
                "EmberLeaflet.EmptyLayer": 1,
                "EmberLeaflet.MapView": 1,
                "EmberLeaflet.TileLayer": 1
            },
            "fors": {},
            "namespaces": {
                "EmberLeaflet": 1
            },
            "tag": "module",
            "file": "packages/ember-leaflet/lib/tile.js",
            "line": 3,
            "description": "Ember Leaflet"
        }
    },
    "classes": {
        "EmberLeaflet.CollectionBoundsMixin": {
            "name": "EmberLeaflet.CollectionBoundsMixin",
            "shortname": "EmberLeaflet.CollectionBoundsMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet",
            "file": "packages/ember-leaflet/lib/collection/bounds.js",
            "line": 1,
            "description": "`EmberLeaflet.CollectionBoundsMixin` provides bounding box functionality\nto a collection layer.",
            "extends": "Ember.Mixin",
            "uses": [
                "EmberLeaflet.BoundsMixin"
            ]
        },
        "EmberLeaflet.CollectionLayer": {
            "name": "EmberLeaflet.CollectionLayer",
            "shortname": "EmberLeaflet.CollectionLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet",
            "file": "packages/ember-leaflet/lib/collection/collection.js",
            "line": 3,
            "description": "`EmberLeaflet.CollectionLayer` is the equivalent of `Ember.CollectionView`\nfor DOM views -- it observes the `content` array for updates and maintains\na list of child layers associated with the content array.",
            "extends": "EmberLeaflet.Layer"
        },
        "EmberLeaflet.DraggableMixin": {
            "name": "EmberLeaflet.DraggableMixin",
            "shortname": "EmberLeaflet.DraggableMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet",
            "file": "packages/ember-leaflet/lib/marker/draggable.js",
            "line": 3,
            "description": "`EmberLeaflet.DraggableMixin` adds drag and drop functionality to\n`EmberLeaflet.MarkerLayer` classes."
        },
        "EmberLeaflet.MarkerLayer": {
            "name": "EmberLeaflet.MarkerLayer",
            "shortname": "EmberLeaflet.MarkerLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet",
            "file": "packages/ember-leaflet/lib/marker/marker.js",
            "line": 3,
            "description": "`EmberLeaflet.MarkerLayer` is a leaflet marker.",
            "extends": "EmberLeaflet.Layer"
        },
        "EmberLeaflet.MarkerCollectionLayer": {
            "name": "EmberLeaflet.MarkerCollectionLayer",
            "shortname": "EmberLeaflet.MarkerCollectionLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet",
            "file": "packages/ember-leaflet/lib/marker_collection/marker_collection.js",
            "line": 1,
            "description": "`EmberLeaflet.MarkerCollectionLayer` is a specific collection layer\ncontaining marker objects.",
            "extends": "EmberLeaflet.CollectionLayer",
            "uses": [
                "EmberLeaflet.BoundsMixin"
            ]
        },
        "EmberLeaflet.BoundsMixin": {
            "name": "EmberLeaflet.BoundsMixin",
            "shortname": "EmberLeaflet.BoundsMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "EmberLeaflet.CollectionBoundsMixin",
                "EmberLeaflet.MarkerCollectionLayer"
            ],
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet",
            "file": "packages/ember-leaflet/lib/mixin/bounds.js",
            "line": 3,
            "description": "`EmberLeaflet.BoundsMixin` provides the ability to get a collection's\nbounds by its locations property.",
            "extends": "Ember.Mixin"
        },
        "EmberLeaflet.PopupMixin": {
            "name": "EmberLeaflet.PopupMixin",
            "shortname": "EmberLeaflet.PopupMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet",
            "file": "packages/ember-leaflet/lib/mixin/popup.js",
            "line": 3,
            "description": "`EmberLeaflet.PopupMixin` adds popup functionality to any\n`EmberLeaflet.Layer` class."
        },
        "EmberLeaflet.ArrayPathLayer": {
            "name": "EmberLeaflet.ArrayPathLayer",
            "shortname": "EmberLeaflet.ArrayPathLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet",
            "file": "packages/ember-leaflet/lib/path/array.js",
            "line": 3,
            "description": "`EmberLeaflet.ArrayPathLayer` is a base geometry on the map that\nadjusts based on a content object that should be an array of\nLatLng objects.",
            "extends": "EmberLeaflet.Layer"
        },
        "EmberLeaflet.PathBoundsLayer": {
            "name": "EmberLeaflet.PathBoundsLayer",
            "shortname": "EmberLeaflet.PathBoundsLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet",
            "file": "packages/ember-leaflet/lib/path/bounds.js",
            "line": 3,
            "description": "`EmberLeaflet.PathBoundsLayer` is a base class that takes a list\nof locations and computed the bounding box.",
            "extends": "EmberLeaflet.ArrayPathLayer"
        },
        "EmberLeaflet.CircleLayer": {
            "name": "EmberLeaflet.CircleLayer",
            "shortname": "EmberLeaflet.CircleLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet",
            "file": "packages/ember-leaflet/lib/path/circle.js",
            "line": 3,
            "description": "`EmberLeaflet.CircleLayer` is a circle on the map that adjusts based\non a content object that should be an array of LatLng objects.",
            "extends": "EmberLeaflet.PointPathLayer"
        },
        "EmberLeaflet.PathLayer": {
            "name": "EmberLeaflet.PathLayer",
            "shortname": "EmberLeaflet.PathLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet",
            "file": "packages/ember-leaflet/lib/path/path.js",
            "line": 1,
            "description": "`EmberLeaflet.PathLayer` is a generic layer to be inherited\nby other geometry layer classes. Both CircleGeometry and PathGeometry\nlayers derive from it.",
            "extends": "EmberLeaflet.Layer"
        },
        "EmberLeaflet.PointPathLayer": {
            "name": "EmberLeaflet.PointPathLayer",
            "shortname": "EmberLeaflet.PointPathLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet",
            "file": "packages/ember-leaflet/lib/path/point.js",
            "line": 3,
            "description": "`EmberLeaflet.PointPathLayer` is a base geometry on the map that\nadjusts based on a content object that should be a LatLng object.",
            "extends": "EmberLeaflet.Layer"
        },
        "EmberLeaflet.PolylineLayer": {
            "name": "EmberLeaflet.PolylineLayer",
            "shortname": "EmberLeaflet.PolylineLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet",
            "file": "packages/ember-leaflet/lib/path/polyline.js",
            "line": 3,
            "description": "`EmberLeaflet.PolylineLayer` is a polyline on the map that adjusts based\non a content object that should be an array of LatLng objects.",
            "extends": "EmberLeaflet.ArrayPathLayer"
        },
        "EmberLeaflet.RectangleLayer": {
            "name": "EmberLeaflet.RectangleLayer",
            "shortname": "EmberLeaflet.RectangleLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet",
            "file": "packages/ember-leaflet/lib/path/rectangle.js",
            "line": 3,
            "description": "`EmberLeaflet.RectangleLayer` is a rectangle on the map that adjusts based\non a content object that should be an array of LatLng objects.",
            "extends": "EmberLeaflet.PathBoundsLayer"
        },
        "EmberLeaflet.ContainerLayer": {
            "name": "EmberLeaflet.ContainerLayer",
            "shortname": "EmberLeaflet.ContainerLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet",
            "file": "packages/ember-leaflet/lib/container.js",
            "line": 5,
            "description": "A `ContainerLayer` is an `EmberLeaflet.Layer` subclass that implements `Ember.MutableArray`\nallowing programatic management of its child layers.",
            "extends": "EmberLeaflet.Layer"
        },
        "EmberLeaflet.LayerMixin": {
            "name": "EmberLeaflet.LayerMixin",
            "shortname": "EmberLeaflet.LayerMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet",
            "file": "packages/ember-leaflet/lib/layer.js",
            "line": 4,
            "description": "`EmberLeaflet.LayerMixin` provides basic functionality for the Ember\nwrapper of Leaflet layers, including instantiating child and parent layers."
        },
        "EmberLeaflet.Layer": {
            "name": "EmberLeaflet.Layer",
            "shortname": "EmberLeaflet.Layer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet",
            "file": "packages/ember-leaflet/lib/layer.js",
            "line": 145,
            "description": "`EmberLeaflet.Layer` is a convenience object for those who prefer\ncreating layers with `EmberLeaflet.Layer.extend(...)` rather than\n`Ember.Object.extend(EmberLeaflet.LayerMixin, ...)`."
        },
        "EmberLeaflet.EmptyLayer": {
            "name": "EmberLeaflet.EmptyLayer",
            "shortname": "EmberLeaflet.EmptyLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet",
            "file": "packages/ember-leaflet/lib/layer.js",
            "line": 155,
            "description": "`EmberLeaflet.EmptyLayer` is a null layer mostly for testing."
        },
        "EmberLeaflet.MapView": {
            "name": "EmberLeaflet.MapView",
            "shortname": "EmberLeaflet.MapView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet",
            "file": "packages/ember-leaflet/lib/map.js",
            "line": 1,
            "description": "`EmberLeaflet.MapView` is an `Ember.View` object present in the DOM, and\nalso instantiates a Leaflet map inside.",
            "extends": "EmberLeaflet.ContainerLayerMixin"
        },
        "EmberLeaflet.TileLayer": {
            "name": "EmberLeaflet.TileLayer",
            "shortname": "EmberLeaflet.TileLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet",
            "file": "packages/ember-leaflet/lib/tile.js",
            "line": 3,
            "description": "`EmberLeaflet.TileLayer` is a tile set.",
            "extends": "EmberLeaflet.Layer"
        }
    },
    "classitems": [
        {
            "file": "packages/ember-leaflet/lib/marker/marker.js",
            "line": 14,
            "description": "Should override this binding with a reference to the location property\nof the content object.",
            "class": "EmberLeaflet.MarkerLayer",
            "namespace": "EmberLeaflet"
        },
        {
            "file": "packages/ember-leaflet/lib/marker/marker.js",
            "line": 20,
            "class": "EmberLeaflet.MarkerLayer",
            "namespace": "EmberLeaflet"
        },
        {
            "file": "packages/ember-leaflet/lib/marker/marker.js",
            "line": 24,
            "class": "EmberLeaflet.MarkerLayer",
            "namespace": "EmberLeaflet"
        },
        {
            "file": "packages/ember-leaflet/lib/marker/marker.js",
            "line": 29,
            "description": "Detect clustering above this marker. And return if this marker is inside\na cluster object.",
            "class": "EmberLeaflet.MarkerLayer",
            "namespace": "EmberLeaflet"
        },
        {
            "file": "packages/ember-leaflet/lib/marker_cluster/marker_cluster.js",
            "line": 4,
            "description": "cluster won't update when a marker inside it is moved, so we need to\nmake sure to delete and re-create markers when they are inside a cluster\nas opposed to just moving them.",
            "class": "EmberLeaflet.MarkerCollectionLayer",
            "namespace": "EmberLeaflet"
        },
        {
            "file": "packages/ember-leaflet/lib/mixin/bounds.js",
            "line": 13,
            "class": "EmberLeaflet.BoundsMixin",
            "namespace": "EmberLeaflet"
        },
        {
            "file": "packages/ember-leaflet/lib/path/array.js",
            "line": 23,
            "description": "If this property is null, watch the content object for location updates.\nIf this property is set, look inside this property of the content object\nfor the locations array.",
            "class": "EmberLeaflet.ArrayPathLayer",
            "namespace": "EmberLeaflet"
        },
        {
            "file": "packages/ember-leaflet/lib/path/array.js",
            "line": 30,
            "description": "If this property is null, each item in the locations array (whether it \nis the content object or a subitem of it) is a LatLng object. If this is\nset, then look inside this property of each item in the array for its\nlocation.",
            "class": "EmberLeaflet.ArrayPathLayer",
            "namespace": "EmberLeaflet"
        },
        {
            "file": "packages/ember-leaflet/lib/path/array.js",
            "line": 38,
            "description": "The computed array of locations.",
            "class": "EmberLeaflet.ArrayPathLayer",
            "namespace": "EmberLeaflet"
        },
        {
            "file": "packages/ember-leaflet/lib/path/array.js",
            "line": 135,
            "class": "EmberLeaflet.ArrayPathLayer",
            "namespace": "EmberLeaflet"
        },
        {
            "file": "packages/ember-leaflet/lib/path/circle.js",
            "line": 13,
            "description": "If this property is null, watch the content object for radius updates.\nIf this property is set, look inside this property of the content object\nfor the radius.",
            "class": "EmberLeaflet.CircleLayer",
            "namespace": "EmberLeaflet"
        },
        {
            "file": "packages/ember-leaflet/lib/container.js",
            "line": 15,
            "description": "Initialize child layers from the class variable. This should only be\ncalled once.",
            "class": "EmberLeaflet.ContainerLayer",
            "namespace": "EmberLeaflet"
        },
        {
            "file": "packages/ember-leaflet/lib/layer.js",
            "line": 17,
            "description": "List of all supported events. EmberLeaflet will automatically create\nand register event handler functions with the same name for events\nlisted in this property.\n\nDefine this property in a derived view to add your own custom events.",
            "itemtype": "property",
            "name": "events",
            "access": "protected",
            "tagname": "",
            "type": "Array",
            "class": "EmberLeaflet.LayerMixin",
            "namespace": "EmberLeaflet"
        },
        {
            "file": "packages/ember-leaflet/lib/layer.js",
            "line": 30,
            "description": "Reference to parent layer. Never set directly.",
            "itemtype": "property",
            "name": "childLayers",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "default": "[]",
            "class": "EmberLeaflet.LayerMixin",
            "namespace": "EmberLeaflet"
        },
        {
            "file": "packages/ember-leaflet/lib/layer.js",
            "line": 42,
            "description": "Create and return the layer instance for the view.\n\nThis needs to be implemented for any new type of view.",
            "access": "protected",
            "tagname": "",
            "class": "EmberLeaflet.LayerMixin",
            "namespace": "EmberLeaflet"
        },
        {
            "file": "packages/ember-leaflet/lib/layer.js",
            "line": 51,
            "description": "This gets called by the view just before the layer is created.",
            "access": "protected",
            "tagname": "",
            "class": "EmberLeaflet.LayerMixin",
            "namespace": "EmberLeaflet"
        },
        {
            "file": "packages/ember-leaflet/lib/layer.js",
            "line": 58,
            "description": "This get called by the view after it has created the layer.\n\nOverride this in your derived view to gain access to newly created\nlayer (via `get(\"layer\")`) for any custom functionality you may want\nto add.",
            "access": "protected",
            "tagname": "",
            "class": "EmberLeaflet.LayerMixin",
            "namespace": "EmberLeaflet"
        },
        {
            "file": "packages/ember-leaflet/lib/utils.js",
            "line": 3,
            "description": "Convert a L.LatLng object to a [lat, lng] array.",
            "class": "",
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet"
        },
        {
            "file": "packages/ember-leaflet/lib/utils.js",
            "line": 9,
            "description": "Convert a L.LatLng object to a [lng, lat] array.",
            "class": "",
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet"
        },
        {
            "file": "packages/ember-leaflet/lib/utils.js",
            "line": 15,
            "description": "Convert a [lat, lng] array to an L.LatLng object. If LatLng is passed in,\npass it through.",
            "class": "",
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet"
        },
        {
            "file": "packages/ember-leaflet/lib/utils.js",
            "line": 22,
            "description": "Convert a [lng, lat] array to an L.LatLng object. If LatLng is passed in,\npass it through.",
            "class": "",
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet"
        },
        {
            "file": "packages/ember-leaflet/lib/utils.js",
            "line": 39,
            "description": "Define a computed property that converts a [longitude, latitude] array\nto a leaflet LatLng object.",
            "itemtype": "method",
            "name": "latlngFromLngLatArray",
            "class": "",
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet"
        },
        {
            "file": "packages/ember-leaflet/lib/utils.js",
            "line": 56,
            "description": "Define a computed property that converts a [latitude, longitude] array\nto a leaflet LatLng object.",
            "itemtype": "method",
            "name": "latlngFromLatLngArray",
            "class": "",
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet"
        },
        {
            "file": "packages/ember-leaflet/lib/utils.js",
            "line": 73,
            "description": "Define a computed property that gets and sets a value from the\noptions object.",
            "itemtype": "method",
            "name": "optionProperty",
            "class": "",
            "module": "ember-leaflet",
            "namespace": "EmberLeaflet"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nShould override this binding with a reference to the location property\nof the content object.",
            "line": " packages/ember-leaflet/lib/marker/marker.js:14"
        },
        {
            "message": "Missing item type",
            "line": " packages/ember-leaflet/lib/marker/marker.js:20"
        },
        {
            "message": "Missing item type",
            "line": " packages/ember-leaflet/lib/marker/marker.js:24"
        },
        {
            "message": "Missing item type\nDetect clustering above this marker. And return if this marker is inside\na cluster object.",
            "line": " packages/ember-leaflet/lib/marker/marker.js:29"
        },
        {
            "message": "Missing item type\ncluster won't update when a marker inside it is moved, so we need to\nmake sure to delete and re-create markers when they are inside a cluster\nas opposed to just moving them.",
            "line": " packages/ember-leaflet/lib/marker_cluster/marker_cluster.js:4"
        },
        {
            "message": "Missing item type",
            "line": " packages/ember-leaflet/lib/mixin/bounds.js:13"
        },
        {
            "message": "Missing item type\nIf this property is null, watch the content object for location updates.\nIf this property is set, look inside this property of the content object\nfor the locations array.",
            "line": " packages/ember-leaflet/lib/path/array.js:23"
        },
        {
            "message": "Missing item type\nIf this property is null, each item in the locations array (whether it \nis the content object or a subitem of it) is a LatLng object. If this is\nset, then look inside this property of each item in the array for its\nlocation.",
            "line": " packages/ember-leaflet/lib/path/array.js:30"
        },
        {
            "message": "Missing item type\nThe computed array of locations.",
            "line": " packages/ember-leaflet/lib/path/array.js:38"
        },
        {
            "message": "Missing item type",
            "line": " packages/ember-leaflet/lib/path/array.js:135"
        },
        {
            "message": "Missing item type\nIf this property is null, watch the content object for radius updates.\nIf this property is set, look inside this property of the content object\nfor the radius.",
            "line": " packages/ember-leaflet/lib/path/circle.js:13"
        },
        {
            "message": "Missing item type\nInitialize child layers from the class variable. This should only be\ncalled once.",
            "line": " packages/ember-leaflet/lib/container.js:15"
        },
        {
            "message": "Missing item type\nCreate and return the layer instance for the view.\n\nThis needs to be implemented for any new type of view.",
            "line": " packages/ember-leaflet/lib/layer.js:42"
        },
        {
            "message": "Missing item type\nThis gets called by the view just before the layer is created.",
            "line": " packages/ember-leaflet/lib/layer.js:51"
        },
        {
            "message": "Missing item type\nThis get called by the view after it has created the layer.\n\nOverride this in your derived view to gain access to newly created\nlayer (via `get(\"layer\")`) for any custom functionality you may want\nto add.",
            "line": " packages/ember-leaflet/lib/layer.js:58"
        },
        {
            "message": "Missing item type\nConvert a L.LatLng object to a [lat, lng] array.",
            "line": " packages/ember-leaflet/lib/utils.js:3"
        },
        {
            "message": "Missing item type\nConvert a L.LatLng object to a [lng, lat] array.",
            "line": " packages/ember-leaflet/lib/utils.js:9"
        },
        {
            "message": "Missing item type\nConvert a [lat, lng] array to an L.LatLng object. If LatLng is passed in,\npass it through.",
            "line": " packages/ember-leaflet/lib/utils.js:15"
        },
        {
            "message": "Missing item type\nConvert a [lng, lat] array to an L.LatLng object. If LatLng is passed in,\npass it through.",
            "line": " packages/ember-leaflet/lib/utils.js:22"
        }
    ]
}